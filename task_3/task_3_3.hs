{- Дана следующая структура данных:
newtype PSet a = PSet{ contains :: (a -> Bool) }
представляющая собой предикатную реализацию математического понятия «множество». Реализуйте столько вариантов реализаций классов Monoid и Functor для данной структуры данных, сколько сможете. Объясните свои решения.
-}

module Task33 where
-- В PSet лежит функция, которая определяет находится ли объект в множестве или нет 
-- Для каждого PSet определим свою реализацию моноида
newtype PSet1 a = PSet1{ contains1 :: (a -> Bool) }
newtype PSet2 a = PSet2{ contains2 :: (a -> Bool) }
newtype PSet3 a = PSet3{ contains3 :: (a -> Bool) }

-- Экземпляр пересечение множеств (A && B)
instance Monoid (PSet1 a) where
    mempty = PSet1 (\a -> True) -- случай: любой элемент содержится в данном множестве
    mappend (PSet1 a) (PSet1 b) = PSet1 (\x -> (a x) && (b x)) -- пересечение. Определяем находится ли х во множестве
	
-- Экземпляр объединение множеств (A || B)	
instance Monoid (PSet2 a) where
    mempty = PSet2 (\a -> False)
    mappend (PSet2 a) (PSet2 b) = PSet2 (\x -> (a x) || (b x))
	
-- Разность множеств нельзя реализовать, т.к. mappend должен возвращать одинаковые значения, независимо от порядка аргументов. А - В и В - А разные ситуации